package org.example;

// Під час створення проєкту, вибираємо Maven-інструмент для збирання і керування проєктом.
// 1. У файл pom.xml встановлюємо dependencies. Скачуємо їх за адресою mavenrepository
      // - testng - 1-а бібліотека
      // - selenide - 2-a - приклад у файлі
      // - оновити Maven (у прямокутничку) и помилки зникли
// 2. В папці test.java create class i void method + add annotation @Test - with library org.testng.annotations.(*!)
      // - запускаємо тест -> на стрілочку в коді або
      // в терміналі: (перед цим слід встановити Maven)
                    // mvn clean install - запуск всіх тестів в терміналі - виконує очищення проекту (clean) і потім збирає його (install). Ця команда компілює вихідний код, запускає тести, створює артефакт проекту і встановлює його у локальне сховище Maven. (+ перезапуск проєкту і залежностей)
                    // mvn clean test - виконує очищення проекту (clean), але потім запускає тести (test). Ця команда компілює вихідний код та виконує тести, але не створює артефакт або встановлює його.
                    // mvn test '-Dtest=FirstTest' - тест певного класу
                    // mvn test '-Dtest=java.*Test' - тест певного Package (а саме папка - java)
// 3. Анотації
              //@BeforeSuite  - метод, який повинен бути виконаний перед виконанням всього тестового "набору" або "сюїта"
              //@BeforeClass  - метод, який повинен бути виконаний перед виконанням будь-яких тестових методів у межах тестового класу.
              //@BeforeMethod - метод, який повинен бути виконаний перед кожним тестовим методом у межах тестового класу.

              //@AfterSuite  - метод, який повинен бути виконаний після виконанням всього тестового "набору" або "сюїта"
              //@AfterClass  - метод, який повинен бути виконаний після виконанням будь-яких тестових методів у межах тестового класу.
              //@AfterMethod - метод, який повинен бути виконаний після кожним тестовим методом у межах тестового класу.
// 4. Метод Configuration - описаний в класі NewConfiguration!
              // - Використовуємо лише ті Конфігурації, які нам потрібні

// 5. Папка reports - відправити в gitignore! Там всі додаткові відомості з тестування: скріни, елементи коду тощо. Може накопичувати багато інфи.

// 6. Функції, які можуть виконувати анотації:
            // - @Test (description = "TEST 25: This test verify user for URL www.google.com") - опис тесту!
            // - @Test(alwaysRun = true)             - завжди виконувати
            // - @Test(dependsOnMethods = "test 25") - відпрацьовує лише після виконання попереднього, наприклад, тесту №25.
            // - @Test(priority = 2)                 - пріорітетність тестів

// 7. Створимо базовий тест, де розмістимо всі необхідні конфігурації.
            // папка src -> java -> config -> BaseTest - зразок базового тесту!
            // до всіх класів маємо додати базовий клас. У класі - 1 тест (методів може бути декілька)
            // наприклад:
                        // public class Test extends BaseTest {}
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello world!");
    }
}